{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../AttributesBar.svelte",
    "../../Recommendations.svelte",
    "../../RecommendationsMain.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport * as d3 from 'd3'\n\t// import Draco from 'draco-vis'\n\timport AttributesBar from './AttributesBar.svelte'\n\timport RecommendationsMain from './RecommendationsMain.svelte'\n\n\tlet rand = -1;\n\tfunction getRand() {\n\t\tfetch(\"./classifier/api?param1=1&param1=2\")\n\t}\n\n\n\tlet selectedAttributes = []\n\tlet promise = loadData();\n\n\tasync function loadData() {\n\t\tconst dataset = await d3.csv(`cereal.csv`)\n\n\t\treturn dataset\n\t}\n\n\tfunction updateAttributes(event) {\n\t\tlet attribute = event.detail.attribute\n\t\t\n\t\tif (selectedAttributes.includes(attribute)) {}\n\t\telse {\n\t\t\tselectedAttributes.push(attribute)\n\t\t\tselectedAttributes = selectedAttributes\n\t\t}\n\t}\n</script>\n\n<div id=\"main\">\n\t<!-- <h1>Your number is {rand}!</h1> -->\n\t<!-- <button on:click={getRand}>Get a random number</button> -->\n\t{#await promise}\n\t\t<p>...loading</p>\n\t{:then dataset}\n\t\t\t<AttributesBar\n\t\t\t\ton:attributeClicked={updateAttributes}\n\t\t\t\t{dataset}/>\n\t\t\t<RecommendationsMain\n\t\t\t\t{selectedAttributes}\n\t\t\t\t{dataset}/>\n\t{:catch error}\n\t\t<p style=\"color: red\">{error.message}</p>\n\t{/await}\n</div>\n\n<style>\n\t#main {\n\t\tdisplay: flex;\n\t\tflex-direction: row\n\t}\n</style>",
    "<script>\n\timport { createEventDispatcher } from 'svelte'\n\n\texport let dataset = []\n\n\t// let selectedAttributes = []\n\n\tlet attributes = Object.keys(dataset[0])\n\n\tconst dispatch = createEventDispatcher()\n\n\tfunction update(a) {\n\t\t// selectedAttributes = selectedAttributes.push(a)\n\t\tlet element = document.getElementById(a)\n\t\telement.style.backgroundColor = \"#a3ccb7\"\n\t\tdispatch('attributeClicked', {\n\t\t\tattribute: a,\n\t\t});\n\t}\n</script>\n\n<div id=\"attributesBar\">\n\t<p><b>ATTRIBUTES</b></p>\n\t{#each attributes as a}\n\t\t<button\n\t\t\tid={a}\n\t\t\ton:click={() => update(a)}>{a}</button>\n\t{/each}\n</div>\n\n<style>\n\t#attributesBar {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 150px;\n\t\tmargin-right: 50px\n\t}\n</style>",
    "<script>\n\timport * as d3 from 'd3'\n\timport Draco from 'draco-vis'\n\timport vegaToRanking from './vegaToRanking.js'\n\timport dracoDataConstraints from './dracoDataConstraints.js'\n\timport dracoMarkConstraints from './dracoMarkConstraints.js'\n\timport dracoVisConstraints from './dracoVisConstraints.js'\n\timport defaultConstraints from './defaults.js'\n\n\timport getRecombinations from './getRecombinations.js'\n\n\texport let vegaSpecs = []\n\texport let dataset = []\n\texport let selectedAttributes = []\n\texport let recomendationCount = 9\n\texport let updateCount = 0\n\n\t// Track of user preferences\n\tlet moreLikeThis = []\n\tlet lessLikeThis = []\n\n\t// Current recomendations\n\tlet recommendations = []\n\tlet similarRecommendations = []\n\n\t// let trainingData = vegaSpecs['vega']\n\t// console.log(vegaSpecs)\n\n\tlet classifierResult\n\n\t// update constraints\n\t// function getDracoConstraints() {\n\t// \tif (moreLikeThis.length == 0 || lessLikeThis.length == 0) {\n\t// \t\treturn\n\t// \t}\n\n\t// \tlet attrs = []\n\n\t// \tlet high = []\n\t// \tlet low = []\n\n\t// \tfor (let h of moreLikeThis) {\n\t// \t\tlet ranking = vegaToRanking(h['vega'])\n\t// \t\thigh.push(ranking)\n\t// \t\tattrs = attrs.concat(Object.keys(ranking))\n\t// \t}\n\n\t// \tfor (let l of lessLikeThis) {\n\t// \t\tlet ranking = vegaToRanking(l['vega'])\n\t// \t\tlow.push(ranking)\n\t// \t\tattrs = attrs.concat(Object.keys(ranking))\n\t// \t}\n\n\t// \t// Remove duplicates\n\t// \tattrs = new Set(attrs)\n\n\t// \t// Convert back to array\n\t// \tattrs = [...attrs]\n\n\t// \tlet x1 = {}\n\t// \tlet x0 = {}\n\n\t// \tfor (let a of attrs) {\n\t// \t\tx1[a] = d3.mean(low, function(d) { if (d[a]) {return d[a]}; return 0 });\n\t// \t\tx0[a] = d3.mean(high, function(d) { if (d[a]) {return d[a]}; return 0});\n\t// \t}\n\n\t// \tvar hlpair = [];\n\t// \tfor (var i = 0; i<high.length; i++) {\n\t// \t\tfor (var j = 0; j<low.length; j++) {\n\t// \t\t\tvar tmpelt = {};\n\t// \t\t\tfor (let k of attrs) {\n\t// \t\t\t\ttmpelt[k] = high[i][k] - low[j][k];\n\t// \t\t\t}\n\t// \t\t\thlpair[hlpair.length] = tmpelt;\n\t// \t\t}\n\t// \t}\n\t\t\n\t// \t// calculate new attr\n\t// \tconsole.log(\"Getting new axis vector...\")\n\t// \tvar V = {}, Vchanged = {}, Verror = {}, norm = 0;\n\t// \tfor (let i of attrs) {\n\t// \t\tV[i] = 0;\n\t// \t\tVchanged[i] = 0;\n\t// \t}\n\t// \tfor (let i of attrs) {\n\t// \t V[i] = x0[i]-x1[i];\n\t// \t norm = norm + (x0[i]-x1[i])*(x0[i]-x1[i]);\n\t// \t}\n\t// \tlet rankedConstraints = [];\n\t// \tfor (let i of attrs) {\n\t// \t\trankedConstraints.push({\"attr\":i, \"value\":V[i]})\n\t// \t}\n\t// \trankedConstraints = rankedConstraints.sort(function(a,b) {return Math.abs(b[\"value\"]) - Math.abs(a[\"value\"]);})\n\n\t// \trankedConstraints = rankedConstraints.filter(function(a) {return a[\"value\"] != 0})\n\n\t// \t// fetch(`./classifier`, {method:\"POST\", body:JSON.stringify(vegaSpecs)})\n\t// \t// \t.then(d => d.text())\n //  //     \t\t.then(d => (classifierResult = d))\n\n\t// \treturn rankedConstraints\n\t// }\n\n\tfunction solveDraco(newConstraints) {\n\t\tconsole.log(newConstraints)\n\t\tlet recs = []\n\n\t\tconst url = 'https://unpkg.com/wasm-clingo@0.2.2';\n\n\t\t// const newConstraints = getDracoConstraints()\n\t\t// console.log(newConstraints)\n\t\tlet markConstraints = dracoMarkConstraints(newConstraints)\n\t\tlet visConstraints = dracoVisConstraints(newConstraints)\n\t\t// let visConstraints = ''\n\n\t\tconst draco = new Draco(url)\n\t\treturn draco.init().then(() => {\n\t\t\t// Get metadata about dataset\n\t\t\tdraco.prepareData(dataset)\n\t\t\tconst schema = draco.getSchema()\n\t\t\tconst dataConstraints = dracoDataConstraints(schema)\n\n\t\t\t// console.log(schema)\n\n\t\t\t// Create constraints based on schema\n\t\t\tconst inputConstraints = `\n\t\t\t\tdata(\"cereal.csv\").\n\t\t\t\tnum_rows(77).\n\n\t\t\t\t${dataConstraints}\n\n\t\t\t\t${markConstraints}\n\n\t\t\t\t% ====== Query constraints ======\n\t\t\t\t${visConstraints}\n\t\t\t`;\n\n\t\t\t// console.log(inputConstraints)\n\n\t\t\tconst solution = draco.solve(inputConstraints, { models: recomendationCount });\n\t\t\tif (!solution) {\n\t\t\t\tconsole.log(solution, newConstraints)\n\t\t\t\treturn \n\t\t\t}\n\n\t\t\tfor (let s of solution['specs']) {\n\t\t\t\trecs.push({'vega':s})\n\t\t\t}\n\n\t\t\tsimilarRecommendations = []\n\t\t\tsimilarRecommendations = recs\n\n\t\t\tconsole.log(recs)\n\n\t\t\treturn recs\n\t\t})\n\t}\n\n\tfunction getSimilar(newRecommendations) {\n\t\tlet result = []\n\n\t\tfor (let nr of newRecommendations) {\n\t\t\t// console.log(nr)\n\t\t\tlet individualSpecs = vegaToRanking(nr['vega'])\n\t\t\tlet rankedSpecs = []\n\t\t\tfor (let s of Object.keys(individualSpecs)) {\n\t\t\t\tif (individualSpecs[s] !== 0) {\n\t\t\t\t\trankedSpecs.push({'attr': s, 'value': individualSpecs[s]})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult.push(solveDraco(rankedSpecs))\n\t\t}\n\t\t\n\t\treturn result\n\t}\n\n\t// function getAllSimilar(newRecommendations) {\n\t// \t// let individualSpecs = vegaToRanking(vegaSpec)\n\t\t\n\t// \tPromise.all(getSimilar(newRecommendations)).then((result) => {\n\t// \t\treturn \n\t// \t\t// console.log('here', result)\n\t// \t})\n\t// }\n\n\t$: {console.log(classifierResult)\n\t\tif (typeof classifierResult !== \"undefined\") {\n\t\t\tlet updatedPreferrences = []\n\n\t\t\tfor (let i = 0; i < classifierResult.length; i++) {\n\t\t\t\tif (i === 1) {\n\t\t\t\t\tupdatedPreferrences.push(dataset[i])\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tPromise.all(getRecombinations(vegaSpecs, updatedPreferrences)).then((result) => {\n\t\t\t\tsimilarRecommendations = result\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction runClassifier() {\n\t\tlet testingData = vegaSpecs.map(v => v.spec)\n\t\tlet trainingData = []\n\n\t\tfor (let m of moreLikeThis) {\n\t\t\tlet newM = m.vega.encoding\n\t\t\tnewM.label = 1\n\t\t\tnewM['mark_' + m.vega.mark] = 1\n\t\t\ttrainingData.push(newM)\n\t\t}\n\t\tfor (let l of lessLikeThis) {\n\t\t\tlet newL = l.vega.encoding\n\t\t\tnewL.label = -1\n\t\t\tnewL['mark_' + l.vega.mark] = 1\n\t\t\ttrainingData.push(newL)\n\t\t}\n\n\t\tconsole.log('updated', trainingData)\n\n\t\tlet classifierData = {\n\t\t\t'training': trainingData,\n\t\t\t'testing': testingData\n\t\t}\n\n\t\tfetch(`./classifier`, {method:\"POST\", body:JSON.stringify(classifierData)})\n\t\t\t.then(d => d.text())\n      \t\t.then(d => (classifierResult = d))\n\t}\n\n\t$: {recommendations = similarRecommendations.map(r => {\n\t\t\tif (r.length === 0) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn r[0]\n\t\t})\n\t}\n\n\t$: {if (updateCount === 1) {\n\t\t\tconsole.log(dataset)\n\t\t\tPromise.all(getRecombinations(vegaSpecs, dataset)).then((result) => {\n\t\t\t\tsimilarRecommendations = result\n\t\t\t})\n\t\t\t// let newRecommendations = getRecombinations(vegaSpecs, dataset)\n\t\t\t// getAllSimilar(newRecommendations)\n\t\t\t// recommendations = newRecommendations\n\t\t}\n\t\telse {\n\t\t\tconsole.log('running classifier: ', updateCount)\n\t\t\trunClassifier()\n\t\t}}\n\n\t$: for (let rec = 0; rec < recommendations.length; rec++) {\n\t\tif (!recommendations[rec]) {continue}\n\t\tvegaEmbed(`#vis${rec}`, recommendations[rec]['vega'])\n\t}\n\n\t// Update 'moreLikeThis' array\n\tfunction updateMore(i) {\n\t\tmoreLikeThis = moreLikeThis.concat(similarRecommendations[i])\n\t\tconsole.log(moreLikeThis)\n\t}\n\n\t// Update 'lessLikeThis' array\n\tfunction updateLess(i) {\n\t\tlessLikeThis = lessLikeThis.concat(similarRecommendations[i])\n\t}\n</script>\n\n<div id=\"recommendationDisplay\">\n\t{#each recommendations as c, i}\n\t\t<div class=\"vis\">\n\t\t\t<div id=\"vis{i}\"></div>\n\t\t\t<div class=\"buttons\">\n\t\t\t\t<button on:click={() => updateMore(i)}>\n\t\t\t\t\tMore Like This\n\t\t\t\t</button>\n\t\t\t\t<button on:click={() => updateLess(i)}>\n\t\t\t\t\tLess Like This\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t{/each}\n</div>\n\n<style>\n\t#recommendationDisplay {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(3, 350px);\n\t\tgrid-template-rows: repeat(3, 350px);\n\t\tgrid-gap: 50px;\n\t\tmargin-top: 50px\n\t}\n\n\t.vis {\n\t\toverflow: scroll;\n\t}\n</style>\n",
    "<script>\n\timport * as d3 from 'd3'\n\timport Recommendations from './Recommendations.svelte'\n\n\texport let dataset = []\n\texport let selectedAttributes = []\n\n\tlet promise = loadSpecs();\n\tlet updateCount = 0\n\n\tfunction dataPreprocessor(d) {\n\t\tlet result = {}\n\t\tfor (let i = 0; i < d3.keys(d).length; i++) {\n\t\t\tlet variableName = d3.keys(d)[i]\n\t\t\tif (variableName === 'filename') {\n\t\t\t\tresult[variableName] = d3.values(d)[i]\n\t\t\t} else {\n\t\t\t\tresult[variableName] = +d3.values(d)[i]\n\t\t\t}\n\t\t}\n\t    return result\n\t}\n\n\tasync function loadSpecs() {\n\t\tconst specs = await d3.csv(`/data/specs_binary.csv`, dataPreprocessor)\n\n\t\tconst vegaSpecs = []\n\n\t\tfor (let i in specs) {\n\t\t\tlet s = specs[i]\n\t\t\tlet vegaFilename = s.filename\n\n\t\t\tif (!vegaFilename) { continue }\n\t\t\t\t\n\t\t\tvegaFilename = vegaFilename.replace(\"./\", \"\")\n\t\t\tconst vegaSpec = await d3.json(vegaFilename)\n\t\t\tvegaSpecs.push({ 'spec':s, 'vega':vegaSpec, 'index': i })\n\t\t\t// vegaSpecs.push(s)\n\t\t}\n\n\t\treturn vegaSpecs\n\t}\n\n\tfunction update() {\n\t\tupdateCount++\n\t}\n</script>\n\n<div id=\"recommendationsMain\">\n\t{#await promise}\n\t\t<p>...loading</p>\n\t{:then vegaSpecs}\n\t\t<div>\n\t\t\t<p><b>RECOMMENDATIONS</b></p>\n\t\t\t<button on:click={update}>Update Recommendations</button>\n\t\t</div>\n\t\t<Recommendations\n\t\t\t{dataset}\n\t\t\t{vegaSpecs}\n\t\t\t{selectedAttributes}\n\t\t\t{updateCount}/>\n\t{:catch error}\n\t\t<p style=\"color: red\">{error.message}</p>\n\t{/await}\n</div>\n\n<style>\n\t#recommendationsMain {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmargin-bottom: 150px\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAkDC,KAAK,eAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG;CACpB,CAAC;ACtBD,cAAc,eAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,KAAK,CAAE,KAAK,CACZ,YAAY,CAAE,IAAI;CACnB,CAAC;AC4PD,sBAAsB,cAAC,CAAC,AACvB,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CACvC,kBAAkB,CAAE,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CACpC,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,IAAI;CACjB,CAAC,AAED,IAAI,cAAC,CAAC,AACL,QAAQ,CAAE,MAAM,AACjB,CAAC;ACvOD,oBAAoB,eAAC,CAAC,AACrB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,aAAa,CAAE,KAAK;CACrB,CAAC"
}