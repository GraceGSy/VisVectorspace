{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../AttributesBar.svelte",
    "../../AttributesConstraints.svelte",
    "../../AttributesWeight.svelte",
    "../../Recommendations.svelte",
    "../../VersionConstraintSolver.svelte",
    "../../VersionRecommendations.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport * as d3 from 'd3'\n\timport AttributesBar from './AttributesBar.svelte'\n\timport VersionRecommendations from './VersionRecommendations.svelte'\n\timport VersionConstraintSolver from './VersionConstraintSolver.svelte'\n\n\tlet version = \"constraintLearner\"\n\n\tlet rand = -1;\n\tfunction getRand() {\n\t\tfetch(\"./classifier/api?param1=1&param1=2\")\n\t}\n\n\tlet selectedAttributes = []\n\tlet promise = loadData();\n\n\tfunction getType(row) {\n\t\tconst result = {}\n\n\t\tfor (let attr of Object.keys(row)) {\n\t\t\tconst value = row[attr]\n\t\t\tif (isNaN(parseFloat(value))) {\n\t\t\t\tresult[attr] ='string'\n\t\t\t} else {\n\t\t\t\tresult[attr] ='number'\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t}\n\n\tasync function loadData() {\n\t\tconst dataset = await d3.csv(`cereal.csv`)\n\n\t\tconst firstRow = dataset[0]\n\n\t\tconst types = getType(firstRow)\n\n\t\treturn {\"dataset\":dataset, \"types\":types}\n\t}\n\n\tfunction updateAttributes(event) {\n\t\tlet attribute = event.detail.attribute\n\t\t\n\t\tif (selectedAttributes.includes(attribute)) {}\n\t\telse {\n\t\t\tselectedAttributes.push(attribute)\n\t\t\tselectedAttributes = selectedAttributes\n\t\t}\n\t}\n</script>\n\n<div id=\"main\" style=\"padding: '20px'\">\n\t{#await promise}\n\t\t<p>...loading</p>\n\t{:then dataset}\n\t\t{#if version === \"constraintSolver\"}\n\t\t\t<VersionConstraintSolver\n\t\t\t\tdataset = {dataset[\"dataset\"]}\n\t\t\t\ttypes = {dataset[\"types\"]}\n\t\t\t\t{selectedAttributes}/>\n\t\t{:else}\n\t\t\t<!-- <AttributesBar\n\t\t\t\ton:attributeClicked={updateAttributes}\n\t\t\t\tdataset={dataset[\"dataset\"]}/> -->\n\t\t\t<VersionRecommendations\n\t\t\t\tdataset = {dataset[\"dataset\"]}\n\t\t\t\ttypes = {dataset[\"types\"]}\n\t\t\t\t{selectedAttributes}/>\n\t\t{/if}\n\t{:catch error}\n\t\t<p style=\"color: red\">{error.message}</p>\n\t{/await}\n</div>\n\n<style>\n\t#main {\n\t\tdisplay: flex;\n\t\tflex-direction: row\n\t}\n</style>",
    "<script>\n\timport { createEventDispatcher } from 'svelte'\n\n\texport let dataset = []\n\n\t// let selectedAttributes = []\n\n\tlet attributes = Object.keys(dataset[0])\n\n\tconst dispatch = createEventDispatcher()\n\n\tfunction update(a) {\n\t\t// selectedAttributes = selectedAttributes.push(a)\n\t\tlet element = document.getElementById(a)\n\t\telement.style.backgroundColor = \"#a3ccb7\"\n\t\tdispatch('attributeClicked', {\n\t\t\tattribute: a,\n\t\t});\n\t}\n</script>\n\n<div id=\"attributesBar\">\n\t<p><b>ATTRIBUTES</b></p>\n\t{#each attributes as a}\n\t\t<button\n\t\t\tid={a}\n\t\t\ton:click={() => update(a)}>{a}</button>\n\t{/each}\n</div>\n\n<style>\n\t#attributesBar {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 150px;\n\t\tmargin-right: 50px;\n\t\tbackground: white;\n\t}\n</style>",
    "<script>\n\texport let selectedMark\n\texport let channelSelections\n\n\timport * as d3 from 'd3'\n\tlet marks = ['', 'area','bar','point', 'line','rect','tick']\n\n\tlet channels = ['x','y','color','size','shape']\n\n\tlet accepted_types = ['type_quantitative', 'type_nominal']\n\n\tlet variable_types = {'name': 'number', 'mfr': 'string', 'type': 'string', 'calories': 'number', 'protein': 'number', 'fat': 'number', 'sodium': 'number', 'fiber': 'number', 'carbo': 'number', 'sugars': 'number', 'potass': 'number', 'vitamins': 'number', 'shelf': 'number', 'weight': 'number', 'cups': 'number', 'rating': 'number'}\n\n\tlet variables = [''].concat(accepted_types).concat(Object.keys(variable_types).map(v => 'field_' + v))\n</script>\n\n<div id=\"attributesBar\">\n\t<p><b>ENCODINGS</b></p>\n\t<p>mark</p>\n\t<div class=\"attribute\">\n\t\t<div class=\"attributeLeft\">mark</div>\n\t\t<select id=\"mark-dropdown\" class=\"attributeRight\" bind:value={selectedMark}>\n\t\t\t{#each marks as m}\n\t\t\t\t<option value={m}>{m}</option>\n\t\t\t{/each}\n\t\t</select>\n\t</div>\n\t<p>channel</p>\n\t\n\t{#each channels as c}\n\t\t<div class=\"attribute\">\n\t\t\t<div class=\"attributeLeft\">{c}</div>\n\t\t\t<select id=\"mark-dropdown\" class=\"attributeRight\" bind:value={channelSelections[c]}>\n\t\t\t\t{#each variables as v}\n\t\t\t\t\t<option value={v}>{v}</option>\n\t\t\t\t{/each}\n\t\t\t</select>\n\t\t</div>\n\t{/each}\n\t\n</div>\n\n<style>\n\t#attributesBar {\n\t\tdisplay: flex;\n\t    flex-direction: column;\n\t    width: 200px;\n\t    padding-right: 50px;\n\t    padding-left: 25px;\n\t    margin-right: 25px;\n\t    background: white;\n\t}\n\n\t.attribute {\n\t\theight: 25px;\n\t\tmargin-bottom: 10px;\n\t\tdisplay: flex;\n\t}\n\n\t.attributeLeft {\n\t\tborder-radius: 12px 0px 0px 12px;\n    \tborder: steelblue solid 2px;\n    \talign-content: middle;\n    \tpadding: 0px 5px 0px 10px;\n\t}\n\n\t.attributeRight {\n\t\tborder-radius: 0px 12px 12px 0px;\n    \tborder-style: solid solid solid hidden;\n\t    border-color: steelblue;\n\t    border-width: 2px;\n    \talign-content: middle;\n    \tpadding: 0px 10px 0px 5px;\n    \theight: 25px;\n\t}\n</style>",
    "<script>\n\texport let attributes = []\n\n\tlet attributesProcessed = []\n\n\t$: {\n\t\tlet newAttributes = []\n\t\tfor (let a of attributes) {\n\t\t\tlet feature = a[0]\n\n\t\t\tif (feature.indexOf(\"mark\") > -1) {\n\t\t\t\tlet name = \"mark\"\n\t\t\t\tlet value = feature.slice(feature.indexOf(\"_\") + 1)\n\t\t\t\tnewAttributes.push([name, value])\n\t\t\t} else {\n\t\t\t\tlet name = feature.slice(0, feature.indexOf(\".\"))\n\t\t\t\tlet value = feature.slice(feature.indexOf(\".\") + 1)\n\t\t\t\tnewAttributes.push([name, value])\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tattributesProcessed = newAttributes\n\t}\n\n\t// let attributes = Object.keys(dataset[0])\n</script>\n\n<div id=\"attributesBar\">\n\t<p><b>LEARNED ENCODINGS</b></p>\n\t{#each attributesProcessed as a}\n\t\t<div key={a.join()} class=\"attribute\">\n\t\t\t<div class=\"attributeLeft\">{a[0]}</div>\n\t\t\t<div class=\"attributeRight\">{a[1]}</div>\n\t\t</div>\n\t{/each}\n</div>\n\n<style>\n\t#attributesBar {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 200px;\n\t    padding-right: 50px;\n\t    padding-left: 25px;\n\t    margin-right: 25px;\n\t\tbackground: white;\n\t}\n\n\t.attribute {\n\t\theight: 25px;\n\t\tmargin-bottom: 10px;\n\t\tdisplay: flex;\n\t}\n\n\t.attributeLeft {\n\t\tborder-radius: 12px 0px 0px 12px;\n    \tborder: steelblue solid 2px;\n    \talign-content: middle;\n    \tpadding: 0px 5px 0px 10px;\n\t}\n\n\t.attributeRight {\n\t\tborder-radius: 0px 12px 12px 0px;\n    \tborder-style: solid solid solid hidden;\n\t    border-color: steelblue;\n\t    border-width: 2px;\n    \talign-content: middle;\n    \tpadding: 0px 10px 0px 5px;\n\t}\n</style>",
    "<script>\n\timport * as d3 from 'd3'\n\timport Draco from 'draco-vis'\n\timport vegaToRanking from './vegaToRanking.js'\n\timport defaultConstraints from './defaults.js'\n\n\timport getRecombinations from './getRecombinations.js'\n\n\timport AttributesWeight from './AttributesWeight.svelte'\n\n\texport let vegaSpecs = []\n\texport let dataset = []\n\texport let selectedAttributes = []\n\texport let recomendationCount = 9\n\t\n\tlet updateCount = 0\n\n\t// Track of user preferences\n\tlet moreLikeThis = []\n\tlet lessLikeThis = []\n\tlet maybeLikeThis = []\n\n\t// Current recommendations\n\tlet recommendations = []\n\t// Recommendations generated from the same draco query\n\tlet similarRecommendations = []\n\t// Recommendations class\n\tlet recommendationsClass = Array(9).fill(\"default\")\n\n\tlet classifierResult\n\n\tlet pinned = []\n\n\tlet attributesWeight = []\n\n\tfunction selectRecommendations(recommendationSets) {\n\t\tsimilarRecommendations = recommendationSets\n\n\t\tlet result = []\n\t\tlet setNumber = 0\n\n\t\tfor (let set of similarRecommendations) {\n\t\t\tlet randomIndex = Math.floor(Math.random() * (set.length))\n\t\t\tlet selected = set[randomIndex]\n\n\t\t\tresult.push(selected)\n\t\t}\n\n\t\trecommendationsClass = recommendationsClass.map(r => 'default')\n\t\trecommendations = result\n\t}\n\n\tfunction runClassifier() {\n\t\tlet testingData = vegaSpecs.map(v => v.spec)\n\t\tlet trainingData = []\n\n\t\tlet newMore = []\n\t\tlet newLess = []\n\t\tlet newMaybe = []\n\n\t\tfor (let i = 0; i < recommendationsClass.length; i++) {\n\t\t\tlet r = recommendationsClass[i]\n\t\t\tif (r === 'more') {\n\t\t\t\tnewMore.push(recommendations[i])\n\t\t\t} else if (r === 'less') {\n\t\t\t\tnewLess.push(recommendations[i])\n\t\t\t} else {\n\t\t\t\tnewMaybe.push(recommendations[i])\n\t\t\t}\n\t\t}\n\n\t\t// If no user feedback provided\n\t\tif (newMore.length === 0 && newLess.length  === 0) {\n\t\t\tPromise.all(getRecombinations(vegaSpecs, dataset)).then((result) => {\n\t\t\t\tselectRecommendations(result)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tmoreLikeThis = moreLikeThis.concat(newMore)\n\t\tlessLikeThis = lessLikeThis.concat(newLess)\n\t\tmaybeLikeThis = maybeLikeThis.concat(newMaybe)\n\n\t\tfor (let m of moreLikeThis) {\n\t\t\tlet newM = m.vega.encoding\n\t\t\tnewM.label = 1\n\t\t\tnewM['mark'] = m.vega.mark\n\t\t\ttrainingData.push(newM)\n\t\t}\n\t\tfor (let l of lessLikeThis) {\n\t\t\tlet newL = l.vega.encoding\n\t\t\tnewL.label = -1\n\t\t\tnewL['mark'] = l.vega.mark\n\t\t\ttrainingData.push(newL)\n\t\t}\n\t\tfor (let mb of maybeLikeThis) {\n\t\t\tlet newMb = mb.vega.encoding\n\t\t\tnewMb.label = 0\n\t\t\tnewMb['mark'] = mb.vega.mark\n\t\t\ttrainingData.push(newMb)\n\t\t}\n\n\t\tconsole.log(testingData)\n\n\t\tlet classifierData = {\n\t\t\t'training': trainingData,\n\t\t\t'testing': testingData\n\t\t}\n\n\t\tfetch(`./classifier`, {method:\"POST\", body:JSON.stringify(classifierData)})\n\t\t\t.then(d => d.text())\n      \t\t.then(d => {\n      \t\t\tlet result = JSON.parse(d)\n\n      \t\t\tattributesWeight = result[\"feature_wts\"]\n\n      \t\t\tlet preferred = result[\"pred\"]\n      \t\t\tlet updatedLikes = []\n      \t\t\tlet updatedMaybe = []\n      \t\t\tlet updatedNo = []\n\n\t\t\t\tfor (let i = 0; i < preferred.length; i++) {\n\t\t\t\t\tif (preferred[i] === 1) {\n\t\t\t\t\t\tupdatedLikes.push(vegaSpecs[i])\n\t\t\t\t\t} else if (preferred[i] === 0) {\n\t\t\t\t\t\tupdatedMaybe.push(vegaSpecs[i])\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdatedNo.push(vegaSpecs[i])\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet updatedPreferrences\n\n\t\t\t\tconsole.log('recommended... ', updatedLikes.length)\n\n\t\t\t\tif (updatedLikes.length < 9) {\n\t\t\t\t\tupdatedPreferrences = updatedLikes.concat(updatedMaybe)\n\t\t\t\t\tif (updatedPreferrences.length < 9) {\n\t\t\t\t\t\tupdatedPreferrences = updatedPreferrences.concat(updatedNo)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tupdatedPreferrences = updatedLikes\n\t\t\t\t}\n\n\t\t\t\tPromise.all(getRecombinations(updatedPreferrences, dataset)).then((result) => {\n\t\t\t\t\tselectRecommendations(result)\n\t\t\t\t})\n      \t\t})\n\t}\n\n\t$: {console.log('update count', updateCount)\n\t\tif (updateCount === 0) {\n\t\t\tPromise.all(getRecombinations(vegaSpecs, dataset)).then((result) => {\n\t\t\t\tselectRecommendations(result)\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('running classifier: ', updateCount)\n\t\t\trunClassifier()\n\t\t}}\n\n\t$: for (let rec = 0; rec < recommendations.length; rec++) {\n\t\tif (!recommendations[rec]) {continue}\n\t\tvegaEmbed(`#vis${rec}`, recommendations[rec]['vega'], {actions:false})\n\t}\n\n\t// Update 'moreLikeThis' array\n\tfunction updateMore(i) {\n\t\t// If items already in moreLikeThis, remove\n\t\tlet current = recommendationsClass[i]\n\t\tif (current === 'more') {\n\t\t\trecommendationsClass[i] = 'default'\n\t\t} else {\n\t\t\trecommendationsClass[i] = 'more'\n\t\t}\n\t}\n\n\t// Update 'lessLikeThis' array\n\tfunction updateLess(i) {\n\t\t// If items already in lessLikeThis, remove\n\t\tlet current = recommendationsClass[i]\n\t\tif (current === 'less') {\n\t\t\trecommendationsClass[i] = 'default'\n\t\t} else {\n\t\t\trecommendationsClass[i] = 'less'\n\t\t}\n\t}\n\n\tfunction update() {\n\t\tupdateCount++\n\t}\n\n\tfunction reset() {\n\t\trecommendationsClass = recommendationsClass.map(r => 'default')\n\t\tmoreLikeThis = []\n\t\tlessLikeThis = []\n\t\tmaybeLikeThis = []\n\t}\n\n\t$: for (let p = 0; p < pinned.length; p++) {\n\t\tif (!pinned[p]) {continue}\n\t\tvegaEmbed(`#pin${p}`, pinned[p]['vega'], {actions:false})\n\t}\n\n\tfunction pin(i) {\n\t\tpinned = pinned.concat([recommendations[i]])\n\t}\n\n\tfunction showPin() {\n\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"450px\"\n\t}\n\n\tfunction closePin() {\n\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"0px\"\n\t}\n</script>\n\n<div id=\"overall\">\n\t<AttributesWeight attributes={attributesWeight}/>\n\t<div id=\"recommendations\">\n\t\t<div id=\"menu\">\n\t\t\t<p><b>RECOMMENDATIONS</b></p>\n\t\t\t<button on:click={update}>UPDATE RECOMMENDATIONS</button>\n\t\t\t<button on:click={reset}>RESET</button>\n\t\t\t<button on:click={showPin}>PINNED</button>\n\t\t</div>\n\t\t<div id=\"recommendationDisplay\">\n\t\t\t{#each recommendations as c, i}\n\t\t\t\t<div class=\"vis\">\n\t\t\t\t\t<div class=\"buttons\">\n\t\t\t\t\t\t<button class=\"{recommendationsClass[i] === 'more' ? 'more' : 'default'}\"\n\t\t\t\t\t\t\t\ton:click={() => updateMore(i)}>\n\t\t\t\t\t\t\tMore Like This\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"{recommendationsClass[i] === 'less' ? 'less' : 'default'}\"\n\t\t\t\t\t\t\t\ton:click={() => updateLess(i)}>\n\t\t\t\t\t\t\tLess Like This\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div class=\"pinButton\" on:click={() => pin(i)}>\n\t\t\t\t\t\t\t<i class=\"material-icons-outlined md-24\">push_pin</i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"vegaContainer\">\n\t\t\t\t\t\t<div id=\"vis{i}\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n\t<div id=\"pinnedDrawer\">\n\t\t<p id=\"pinnedText\"><b>PINNED</b></p>\n\t\t<a id=\"closeButton\" on:click={closePin}>&times;</a>\n\t\t<div id=\"pinnedDisplay\">\n\t\t\t{#each pinned as p, i}\n\t\t\t\t<div id=\"pin{i}\"></div>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#overall {\n\t\tdisplay: flex;\n\t\tbackground: #f4f4f4;\n\t\tpadding-right: 25px;\n\t}\n\n\t#recommendationDisplay {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(3, 350px);\n\t\tgrid-template-rows: repeat(3, 350px);\n\t\tgrid-gap: 15px;\n\t\tmargin-top: 50px\n\t}\n\n\t#pinnedDrawer {\n\t\theight: 100%;\n\t\twidth: 0;\n\t\tposition: fixed;\n\t\tz-index: 1001;\n\t\ttop: 0;\n\t\tright: 0;\n\t\toverflow: scroll;\n\t\ttransition: 0.5s;\n\t\tpadding-top: 30px;\n\t\tbackground: white;\n\t\tbox-shadow: 195px 8px 10px -5px rgba(0,0,0,0.2), 0px 16px 24px 2px rgba(0,0,0,0.14), 0px 6px 30px 5px rgba(0,0,0,0.12);\n\t}\n\n\t#pinnedText {\n\t\tmargin-left: 30px;\n\t}\n\n\t#pinnedDisplay {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 30px;\n\t\tmargin-left: 30px;\n\t\tmax-width: 420px\n\t}\n\n\t#closeButton {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 25px;\n\t\tfont-size: 36px;\n\t\tmargin-left: 50px;\n\t\tcursor: pointer;\n\t}\n\n\t.vis {\n\t\toverflow: scroll;\n\t    background: white;\n\t    display: flex;\n\t    flex-direction: column;\n\t    padding: 15px;\n\t}\n\n\t.buttons {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tmargin-bottom: 20px;\n\t}\n\n\t.pinButton {\n\t\tmargin-left: auto;\n\t\twidth: 28px;\n    \theight: 28px;\n    \tcolor: gray;\n    \tcursor: pointer;\n\t}\n\n\t.more {\n\t\tbackground-color: #cde09b;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.less {\n\t\tbackground-color: #e0a99b;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.default {\n\t\tbackground-color: #f4f4f4;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.vegaContainer {\n\t\theight: 322px;\n\t\toverflow: scroll;\n\t    background: white;\n\t    display: flex;\n\t    flex-direction: column;\n\t}\n</style>\n",
    "<script>\n\timport * as d3 from 'd3'\n\timport Draco from 'draco-vis'\n\n\timport AttributesConstraints from './AttributesConstraints.svelte'\n\timport dracoDataConstraints from './dracoDataConstraints.js'\n\n\texport let dataset = []\n\texport let types = {}\n\texport let selectedAttributes = []\n\t\n\tlet updateCount = 0\n\n\tlet pinned = []\n\n\tlet attributesConstraints = []\n\n\tlet recommendations = []\n\n\t// Track user constraints\n\tlet selectedMark\n\tlet channelSelections = {}\n\n\tfunction solveDraco(markConstraints, visConstraints, dataset) {\n\t\t// console.log(newConstraints)\n\t\tlet recs = []\n\n\t\tconst url = 'https://unpkg.com/wasm-clingo@0.2.2'\n\n\t\tconst draco = new Draco(url)\n\t\treturn draco.init().then(() => {\n\t\t\t// Get metadata about dataset\n\t\t\tdraco.prepareData(dataset)\n\t\t\tconst schema = draco.getSchema()\n\t\t\tconst dataConstraints = dracoDataConstraints(schema)\n\n\t\t\t// Create constraints based on schema\n\t\t\tconst inputConstraints = `\n\t\t\t\tdata(\"cereal.csv\").\n\t\t\t\tnum_rows(77).\n\n\t\t\t\t${dataConstraints}\n\n\t\t\t\t${markConstraints}\n\n\t\t\t\t% ====== Query constraints ======\n\t\t\t\t${visConstraints}\n\t\t\t`;\n\n\t\t\tconsole.log(inputConstraints)\n\n\t\t\tconst solution = draco.solve(inputConstraints, { models: 9 });\n\t\t\t\n\t\t\tconsole.log(\"solution\", solution)\n\t\t\tif (!solution) {\n\t\t\t\tconsole.log('no solution')\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tconsole.log(\"solution\", solution)\n\n\t\t\tfor (let s of solution['specs']) {\n\t\t\t\trecs.push({'vega':s})\n\t\t\t}\n\n\t\t\trecommendations = recs\n\n\t\t\tconsole.log(recommendations)\n\t\t})\n\t}\n\n\tfunction getRecommendations() {\n\t\tlet markConstraints = selectedMark === '' ? '' : `mark(${selectedMark}).`\n\n\t\tlet visConstraints = []\n\n\t\tlet encodingCount = 0\n\t\tfor (let c of Object.keys(channelSelections)) {\n\t\t\tlet channelValue = channelSelections[c]\n\n\t\t\tif (channelValue && channelValue != '') {\n\t\t\t\tlet newConstraint = `encoding(e${encodingCount}).:- not channel(e${encodingCount}, ${c}).`\n\t\t\t\t\n\t\t\t\tif (channelValue.startsWith(\"type\")) {\n\t\t\t\t\t// Get type\n\t\t\t\t\tlet type = channelValue.slice(channelValue.indexOf('type')+5)\n\t\t\t\t\tnewConstraint = newConstraint + `:- not type(e${encodingCount}, ${type}).`\n\n\t\t\t\t} else if (channelValue.startsWith(\"field\")) {\n\t\t\t\t\t// Get field\n\t\t\t\t\tlet field = channelValue.slice(channelValue.indexOf('field')+6)\n\t\t\t\t\tnewConstraint = newConstraint + `:- field(e${encodingCount}, ${field}).`\n\t\t\t\t}\n\n\t\t\t\tvisConstraints.push(newConstraint)\n\t\t\t\tencodingCount++\n\t\t\t}\n\t\t}\n\n\t\tvisConstraints = visConstraints.join('\\n\\n')\n\n\t\tsolveDraco(markConstraints, visConstraints, dataset)\n\t}\n\n\t$: {console.log('update count', updateCount)\n\t\tif (updateCount === 0) {}\n\t\telse {\n\t\t\tgetRecommendations()\n\t\t}}\n\n\t$: for (let rec = 0; rec < recommendations.length; rec++) {\n\t\tif (!recommendations[rec]) {continue}\n\t\tvegaEmbed(`#vis${rec}`, recommendations[rec]['vega'], {actions:false})\n\t}\n\n\tfunction update() {\n\t\tupdateCount++\n\t}\n\n\tfunction reset() {\n\t\tselectedMark = ''\n\t\tchannelSelections = {}\n\t\tupdateCount++\n\t}\n\n\t$: for (let p = 0; p < pinned.length; p++) {\n\t\tif (!pinned[p]) {continue}\n\t\tvegaEmbed(`#pin${p}`, pinned[p]['vega'], {actions:false})\n\t}\n\n\tfunction pin(i) {\n\t\tpinned = pinned.concat([recommendations[i]])\n\t}\n\n\tfunction showPin() {\n\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"450px\"\n\t}\n\n\tfunction closePin() {\n\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"0px\"\n\t}\n</script>\n\n<div id=\"overall\">\n\t<AttributesConstraints bind:selectedMark={selectedMark} bind:channelSelections={channelSelections} />\n\t<div id=\"recommendations\">\n\t\t<div id=\"menu\">\n\t\t\t<p><b>RECOMMENDATIONS</b></p>\n\t\t\t<button on:click={update}>UPDATE RECOMMENDATIONS</button>\n\t\t\t<button on:click={reset}>RESET</button>\n\t\t\t<button on:click={showPin}>PINNED</button>\n\t\t</div>\n\t\t<div id=\"recommendationDisplay\">\n\t\t\t{#each recommendations as c, i}\n\t\t\t\t<div class=\"vis\">\n\t\t\t\t\t<div class=\"pinButton\" on:click={() => pin(i)}>\n\t\t\t\t\t\t<i class=\"material-icons-outlined md-24\">push_pin</i>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"vegaContainer\">\n\t\t\t\t\t\t<div id=\"vis{i}\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n\t<div id=\"pinnedDrawer\">\n\t\t<p id=\"pinnedText\"><b>PINNED</b></p>\n\t\t<a id=\"closeButton\" on:click={closePin}>&times;</a>\n\t\t<div id=\"pinnedDisplay\">\n\t\t\t{#each pinned as p, i}\n\t\t\t\t<div id=\"pin{i}\"></div>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#overall {\n\t\tdisplay: flex;\n\t\tbackground: #f4f4f4;\n\t\tpadding-right: 25px;\n\t}\n\n\t#recommendationDisplay {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(3, 350px);\n\t\tgrid-template-rows: repeat(3, 350px);\n\t\tgrid-gap: 15px;\n\t\tmargin-top: 50px\n\t}\n\n\t#pinnedDrawer {\n\t\theight: 100%;\n\t\twidth: 0;\n\t\tposition: fixed;\n\t\tz-index: 1001;\n\t\ttop: 0;\n\t\tright: 0;\n\t\toverflow: scroll;\n\t\ttransition: 0.5s;\n\t\tpadding-top: 30px;\n\t\tbackground: white;\n\t\tbox-shadow: 195px 8px 10px -5px rgba(0,0,0,0.2), 0px 16px 24px 2px rgba(0,0,0,0.14), 0px 6px 30px 5px rgba(0,0,0,0.12);\n\t}\n\n\t#pinnedText {\n\t\tmargin-left: 30px;\n\t}\n\n\t#pinnedDisplay {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 30px;\n\t\tmargin-left: 30px;\n\t\tmax-width: 420px\n\t}\n\n\t#closeButton {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 25px;\n\t\tfont-size: 36px;\n\t\tmargin-left: 50px;\n\t\tcursor: pointer;\n\t}\n\n\t.vis {\n\t\toverflow: scroll;\n\t    background: white;\n\t    justify-content: center;\n\t    display: flex;\n\t    flex-direction: column;\n\t    padding: 15px;\n\t}\n\n\t.buttons {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t}\n\n\t.pinButton {\n\t\tmargin-left: auto;\n\t\tmargin-bottom: 20px;\n\t\twidth: 28px;\n    \theight: 28px;\n    \tcolor: gray;\n    \tcursor: pointer;\n\t}\n\n\t.vegaContainer {\n\t\theight: 322px;\n\t\toverflow: scroll;\n\t    background: white;\n\t    display: flex;\n\t    flex-direction: column;\n\t}\n</style>\n",
    "<script>\n\timport * as d3 from 'd3'\n\timport Recommendations from './Recommendations.svelte'\n\n\texport let dataset = []\n\texport let types = {}\n\texport let selectedAttributes = []\n\n\tlet promise = loadSpecs();\n\tlet updateCount = 0\n\n\tfunction dataPreprocessor(d) {\n\t\tlet result = {}\n\t\tfor (let i = 0; i < d3.keys(d).length; i++) {\n\t\t\tlet variableName = d3.keys(d)[i]\n\t\t\tif (variableName === 'filename') {}\n\t\t\telse {\n\t\t\t\tresult[variableName] = +d3.values(d)[i]\n\t\t\t}\n\t\t}\n\t    return result\n\t}\n\n\tasync function loadSpecs() {\n\t\tconst specs = await d3.csv(`/manual_specs_one_hot_encoding_3.csv`, dataPreprocessor)\n\n\t\tconst vegaSpecs = []\n\n\t\tfor (let i in specs) {\n\t\t\tif (i === 'columns') { continue; }\n\t\t\tlet s = specs[i]\n\n\t\t\tdelete s.index\n\n\t\t\tvegaSpecs.push({ 'spec':s, 'index': i })\n\t\t}\n\n\t\treturn vegaSpecs\n\t}\n\n\t\n</script>\n\n<div id=\"recommendationsMain\">\n\t{#await promise}\n\t\t<p>...loading</p>\n\t{:then vegaSpecs}\n\t\t<Recommendations\n\t\t\t{dataset}\n\t\t\t{vegaSpecs}\n\t\t\t{selectedAttributes}\n\t\t\t{updateCount}/>\n\t{:catch error}\n\t\t<p style=\"color: red\">{error.message}</p>\n\t{/await}\n</div>\n\n<style>\n\t#recommendationsMain {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmargin-bottom: 150px\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "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"
}